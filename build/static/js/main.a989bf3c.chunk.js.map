{"version":3,"sources":["components/skill.js","components/User.js","components/Header.js","components/Toppage.js","components/Validation.js","components/Register.js","components/Login.js","components/Auth.js","components/Navigation.jsx","components/Display.js","components/editor-tool.js","components/FormButton.js","components/Form.js","components/Detail.js","components/Notify.js","components/Search.js","components/Mypage.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","map","name","id","isLoggedIn","get","LoggedUser","set","key","value","localStorage","setItem","getLocalStorage","ret","getItem","login","account","password","a","async","logout","Header","props","logoutUser","User","history","push","pathname","setState","errMessage","returnHome","bind","this","state","isHome","className","onClick","alt","src","to","React","Component","withRouter","Toppage","Validation","formValidate","type","title","length","tag","blocks","Axios","AxiosBase","create","baseURL","Register","submitCheck","validInput","validMessage","loading","input","message","isOpen","handleClose","createUser","event","preventDefault","post","user_name","then","response","data","catch","err","console","error","Error","target","style","position","color","fontSize","right","bottom","place","body","enterExitTransitionDurationMs","onChange","inputCheck","disabled","description","marginTop","descriptiontext","margin","Login","loginUser","log","isPassOpen","response_message","Auth","children","Navigation","todolists","Fragment","clickFormClose","postFormOpen","Display","userinfo","isGood","isMypage","isSearch","activePage","callDisplayDetail","handleGoodChange","goodCheck","worry_id","actionMethod","displayDetail","detail_todolist","user","goodlist","findIndex","good","_id","isGoodCheck","handleGoodCount","createDetail","isOpenDetail","size","round","thumbnail","status","createTime","time","ta","tag_key","count","isUpdateFormOpen","login_user","username","updateFormOpen","deleteDialogOpen","todolist","i","EDITOR_JS_TOOLS","embed","class","Embed","config","youtube","inlineToolbar","table","Table","paragraph","Paragraph","list","List","warning","Warning","titlePlaceholder","messagePlaceholder","code","Code","linkTool","LinkTool","endpoint","raw","Raw","header","placeholder","quote","Quote","quotePlaceholder","captionPlaceholder","marker","Marker","checklist","CheckList","delimiter","Delimiter","inlineCode","InlineCode","simpleImage","SimpleImage","FormButton","submit","startSending","togglePopover","setTimeout","endSending","handleOpen","tags","savedData","handleWorryUpdate","handleWorryAdd","handleResolveUpdate","handleResolveAdd","createButton","isFormOpen","resolveFormOpen","isResolveFormOpen","isStatus","canSubmit","Form","validSavedDataInput","validSavedDataMessage","validTagsInput","validTagsMessage","isSending","handleBlur","handleBlurTitle","saveEditor","editorInstance","save","worry","clickbutton","form","resolve","suggestions","changeInputText","slice","splice","concat","displayForm","top","instanceRef","instance","tools","enableReInitialize","sendMethod","onBlur","onDelete","handleDelete","onAddition","handleAddition","placeholderText","Detail","isDeleteDialogOpen","deleteDialogClose","getReadOnly","worryElements","document","getElementById","resolveElements","pointerEvents","e","tool","querySelectorAll","display","listDelete","handleTodolistsDelete","delete","onReady","holder","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","Notify","Search","searchLists","searchWord","filterSearchWord","searchDisplay","filterList","filter","toString","toLowerCase","indexOf","text","searchResult","Mypage","worryListDisplay","resultLists","isActive","sendPicToS3","formData","FormData","append","croppedImageUrl","handleReload","isPicOpen","onSelectFile","files","reader","FileReader","addEventListener","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","canSendPic","worryCount","resolveCount","userInfo","alltodolists","unit","width","aspect","resolveListDisplay","usefulListDisplay","getMypageTodolists","getTodoListCount","goodCount","param","params","reverse","height","getCroppedImg","fileName","canvas","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","reject","toBlob","blob","window","URL","revokeObjectURL","fileUrl","createObjectURL","getTodolists","accept","Modal","CliskcPicClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","ruleOfThirds","onComplete","Home","setOpen","popover","gooStatusCheck","getUserinfo","shortid","require","generate","site","unshift","put","new_todolists","pop_open","Date","toLocaleString","goodDeleteCheck","goodAddCheck","CountUp","goodcheck","homeDisplay","CircularProgress","exact","path","render","loginuser","SearchList","App","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a989bf3c.chunk.js","sourcesContent":["const skill = \r\n['C', 'C#', 'C++', 'CoffeeScript', 'ECMAScript', 'Go', 'Java', 'NodeJS', 'PHP', 'Python', 'Ruby', 'Rust', 'Scala', 'Swift', 'Unity', 'TypeScript', 'JavaScript',\r\n 'Angular','ASP.NET','Backbone.js','Bootstrap','Bulma','Django','Laravel','React','Ruby on Rails','Silverstripe','Spring','UIKit','Vue.js',\r\n 'Apache','Nginx','HTML', 'CSS', 'UnrealEngine','GraphQL',\r\n 'MariaDB','MongoDB','MySQL','PostgreSQL','Redis','SQLite','jQuery','Semantic UI', 'TailWind CSS', 'Material-UI','VBA',\r\n 'Git', 'WordPress', 'Homebrew', 'npm', 'Yarn', 'Vscode', 'GitHub', 'Atom','AWS', 'Docker','Firebase','COBOL', 'Perl','Linux', 'GCP',\r\n]\r\n\r\n// ['HTML', 'CSS', 'JavaScript', 'React', 'Python', 'PHP', 'Ruby', 'Django', 'Vue', 'Ruby on rails', 'AWS', 'Docker', 'Go', 'Angular', 'Firebase', 'Vscode', 'C/C++', 'MySQL', 'C#', 'Java', 'VBA', 'VB.NET', 'COBOL', 'Perl', 'TypeScript', 'Kotlin', 'Scala', 'Swift', 'MariaDB', 'PostgreSQL', ]\r\n\r\nmodule.exports = skill.map((name, id) => ({ id, name }))","class User {\r\n    isLoggedIn = () => this.get('isLoggedIn') === 'true';\r\n\r\n    LoggedUser = () => this.get('account');\r\n  \r\n    set = (key, value) => localStorage.setItem(key, value);\r\n  \r\n    get = key => this.getLocalStorage(key);\r\n  \r\n    getLocalStorage = key => {\r\n      const ret = localStorage.getItem(key);\r\n      if (ret) {\r\n        return ret;\r\n      }\r\n      return null;\r\n    };\r\n  \r\n    login = async (account, password) => {\r\n\r\n      this.set('account', account);\r\n      this.set('isLoggedIn', true);\r\n      this.set('password', password);\r\n  \r\n      return true;\r\n    };\r\n  \r\n    logout = async () => {\r\n      if (this.isLoggedIn()) {\r\n        this.set('isLoggedIn', false);\r\n  \r\n      }\r\n    };\r\n  }\r\n  \r\n  export default new User();","import React from 'react';\r\nimport User from './User';\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nimport './App.css'\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.returnHome = this.returnHome.bind(this)\r\n\r\n  }\r\n\r\n  logoutUser = async () => {\r\n    try {\r\n      await User.logout();\r\n      this.props.history.push({ pathname: '/Toppage' });\r\n    } catch (e) {\r\n      this.setState({ errMessage: 'ログアウト失敗しました' });\r\n    }\r\n  };\r\n\r\n  returnHome() {\r\n    this.props.history.push({\r\n      pathname: '/',\r\n      state: { isHome: true }\r\n  })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"header-wrapper\">\r\n          <img onClick={this.returnHome} alt=\"Headeraaa\" className=\"header-image\" src=\"/image/troument-logo.svg\" />\r\n          {User.isLoggedIn()\r\n            ?\r\n            <button className=\"logout-button\" onClick={this.logoutUser}>ログアウト\r\n              <ExitToAppIcon className=\"logout-button-icon\" />\r\n            </button>\r\n            : (<ul className=\"nav-wrapper\">\r\n              <li className=\"header-nav\"><Link to=\"/Register\">会員登録</Link></li>\r\n              <li className=\"header-nav\"><Link to=\"/Login\">ログイン</Link></li>\r\n            </ul>)\r\n          }\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Header);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './Toppage.css'\r\n\r\nclass Toppage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n                <div className=\"wrappers\">\r\n\r\n                    <div className=\"maintitle-wrapper wrapper-margin\">\r\n                        <h1 className=\"maintitle\">\r\n                            <p className=\"maintitle-text\">あなたが解決した</p>\r\n                            <p className=\"maintitle-text\">悩みが</p>\r\n                            <p className=\"maintitle-text\">誰かの役に立つ</p>\r\n                        </h1>\r\n                        <img alt=\"Toppage\" className=\"maintitle-image\" src=\"./image/toppage-main.svg\" />\r\n                    </div>\r\n\r\n                    <div className=\"about-troument wrapper-margin\">\r\n                        <h2 className=\"wrapper-title\">Troumentとは...</h2>\r\n                        <p className=\"about-troument-text\">エンジニアの人が勉強中に出てきた悩みを解決し</p>\r\n                        <p className=\"about-troument-text\">記録してみんなで共有するアプリです</p>\r\n                        <img alt=\"Arrow\" className=\"down-arrow-icon\" src=\"./image/down-arrow.svg\" />\r\n                    </div>\r\n\r\n                    <div className=\"todo-troument-wrapper wrapper-margin\">\r\n                        <h2 className=\"wrapper-title\">Troumentでできること</h2>\r\n                        <div className=\"todo-troument-content\">\r\n                            <p className=\"todo-troument-number\">1</p>\r\n                            <h3 className=\"todo-troument-head\">悩み投稿機能</h3>\r\n                            <p className=\"todo-troument-text\">どうやったら実現できるのだろう？</p>\r\n                            <p className=\"todo-troument-text\">なんでこうなるのだろう？</p>\r\n                            <p className=\"todo-troument-text\">など勉強していて悩んだことをメモ</p>\r\n                            <img alt=\"Worry\" className=\"todo-troument-image\" src=\"./image/toppage-1.svg\" />\r\n                        </div>\r\n\r\n                        <div className=\"todo-troument-content\">\r\n                            <p className=\"todo-troument-number\">2</p>\r\n                            <h3 className=\"todo-troument-head\">解決記録機能</h3>\r\n                            <p className=\"todo-troument-text\">わからなかったことが解決！</p>\r\n                            <p className=\"todo-troument-text\">どうやって解決したか記録しておき</p>\r\n                            <p className=\"todo-troument-text\">ナレッジを貯めていこう</p>\r\n                            <img alt=\"Resolve\" className=\"todo-troument-image\" src=\"./image/toppage-2.svg\" />\r\n                        </div>\r\n\r\n                        {/* <div className=\"todo-troument-content\">\r\n                            <p className=\"todo-troument-number\">3</p>\r\n                            <h3 className=\"todo-troument-head\">解決通知機能</h3>\r\n                            <p className=\"todo-troument-text\">「あの人の悩みが気になる... 」</p>\r\n                            <p className=\"todo-troument-text\">そんなときは気になるボタンを押しておくと解決したときに通知が来ます！</p>\r\n                            <img alt=\"Notify\" className=\"todo-troument-image\" src=\"./image/toppage-3.svg\" />\r\n                        </div> */}\r\n\r\n                        <div className=\"todo-troument-content\">\r\n                            <p className=\"todo-troument-number\">3</p>\r\n                            <h3 className=\"todo-troument-head\">検索機能</h3>\r\n                            <p className=\"todo-troument-text\">これはどうしたらいいのだろうか... </p>\r\n                            <p className=\"todo-troument-text\">そんなときは過去のナレッジを検索してみよう！</p>\r\n                            <img alt=\"Search\" className=\"todo-troument-image\" src=\"./image/toppage-4.svg\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Toppage;","const titleValidation = (title) => {\r\n  if (!title) return 'タイトルを入力してください';\r\n  if (title.length > 40) return 'タイトルは50文字以内で入力してください';\r\n\r\n  return '';\r\n};\r\n\r\nconst tagValidation = (tag) => {\r\n  if (tag.length === 0) return 'タグを入力してください';\r\n  if (tag.length > 5) return 'タグは5つまでしか登録できません';\r\n  return '';\r\n};\r\n\r\nconst savedDataValidation = (savedData) => {\r\n  if (savedData.blocks.length === 0) return '内容を入力してください';\r\n  return '';\r\n};\r\n\r\nconst accountValidation = (account) => {\r\n  if (!account) return '登録する名前を入力してください';\r\n  return '';\r\n};\r\n\r\nconst passwordValidation = (password) => {\r\n  if (!password) return 'パスワードを入力してください';\r\n  if (password.length < 4) return 'パスワードは4文字以上入力してください';\r\n  return '';\r\n};\r\n\r\n\r\nclass Validation {\r\n  static formValidate = (type, value) => {\r\n    switch (type) {\r\n      case 'title':\r\n        return titleValidation(value);\r\n      case 'tags':\r\n        return tagValidation(value);\r\n      case 'savedData':\r\n        return savedDataValidation(value);\r\n      case 'account':\r\n        return accountValidation(value);\r\n      case 'password':\r\n        return passwordValidation(value);\r\n      case 'others':\r\n        default:\r\n    }\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default Validation;","import React from 'react';\r\nimport './Toppage.css'\r\nimport Validation from './Validation';\r\nimport AxiosBase from 'axios';\r\n// import Axios from 'axios';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Popover from \"react-popover\";\r\n\r\n\r\nconst Axios = AxiosBase.create({\r\n  baseURL: \"https://troument-api.net\"\r\n});\r\n\r\nclass Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: {\r\n        account: '',\r\n        password: '',\r\n      },\r\n\r\n      message: {\r\n        account: '',\r\n        password: '',\r\n      },\r\n      loading: false,\r\n      isOpen: false,\r\n    }\r\n    this.createUser = this.createUser.bind(this)\r\n  }\r\n\r\n  createUser(event) {\r\n    event.preventDefault();\r\n\r\n    // const url = constUrl + '/api/user_create'\r\n    Axios.post('/api/user_create', {\r\n      user_name: this.state.input.account,\r\n      password: this.state.input.password,\r\n    })\r\n      .then(response => {\r\n        if (response.data === '同一のアカウント名が存在します') {\r\n          this.setState({\r\n            isOpen: !this.state.isOpen,\r\n          })\r\n        } else {\r\n          this.props.history.push('/login')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(new Error(err))\r\n      })\r\n  }\r\n\r\n  inputCheck(event) {\r\n    event.preventDefault();\r\n    const key = event.target.name;\r\n    const value = event.target.value;\r\n    const { input, message } = this.state;\r\n    this.setState({\r\n      input: {\r\n        ...input,\r\n        [key]: event.target.value\r\n      },\r\n      message: {\r\n        ...message,\r\n        [key]: Validation.formValidate(key, value)\r\n      }\r\n    });\r\n  };\r\n\r\n  submitCheck = () => {\r\n    let validInput;\r\n    let validMessage;\r\n    const { loading } = this.state;\r\n\r\n    if (this.state.input.account === '' | this.state.input.password === '') {\r\n      validInput = false\r\n    } else {\r\n      validInput = true\r\n    }\r\n\r\n    if (this.state.message.account !== \"\" | this.state.message.password !== \"\") {\r\n      validMessage = false\r\n    } else {\r\n      validMessage = true\r\n    }\r\n\r\n    return validInput && validMessage && !loading && !this.state.isOpen\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      isOpen: false,\r\n    })\r\n  };\r\n\r\n\r\n//   clickHandle = () => {\r\n//     this.handleClose();\r\n//     this.setState({\r\n//       isOpen: false,\r\n//     })\r\n// };\r\n\r\n  render() {\r\n    const { input, message } = this.state;\r\n    return (\r\n\r\n      <div className=\"wrappers\">\r\n\r\n        <div>\r\n          <h1 className=\"create-account\">アカウントを作成</h1>\r\n          <form className=\"account-form\">\r\n            <div className=\"form-label-wrap\">\r\n              <section style={{ position: 'relative' }}>\r\n                <label className=\"account-form-label\">アカウント名<span className=\"form-span\">必須</span></label>\r\n                {message.account && (\r\n                  <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, bottom: 0 }}>{message.account}</span>\r\n                )}\r\n              </section>\r\n              <Popover\r\n                isOpen={this.state.isOpen}\r\n                place={'above'}\r\n                body={\r\n                  <div className=\"popover\">\r\n                  <p className=\"popover-text\">同一のアカウント名が存在します</p>\r\n                  <p className=\"popover-text\">別のにしてください</p>\r\n                  </div>\r\n                }\r\n                enterExitTransitionDurationMs={800}\r\n              >\r\n              <input className=\"form-input\"\r\n                type=\"text\"\r\n                name=\"account\"\r\n                value={this.state.input.account}\r\n                onChange={event => this.inputCheck(event)}\r\n                onClick={this.handleClose}\r\n              ></input>\r\n              </Popover>\r\n              <span className=\"account-form-bg\"></span>\r\n            </div>\r\n            <div className=\"form-label-wrap\">\r\n              <label className=\"account-form-label\">パスワード<span className=\"form-span\">必須</span></label>\r\n              <section style={{ position: 'relative' }}>\r\n                {message.password && (\r\n                  <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, bottom: 0 }}>{message.password}</span>\r\n                )}\r\n              </section>\r\n              <input className=\"form-input\"\r\n                type=\"text\"\r\n                name=\"password\"\r\n                value={this.state.input.password}\r\n                onChange={event => this.inputCheck(event)}\r\n              >\r\n              </input>\r\n              <span className=\"account-form-bg\"></span>\r\n            </div>\r\n            <button className=\"register-button\"\r\n              type=\"submit\"\r\n              disabled={!this.submitCheck()}\r\n              onClick={this.createUser}\r\n            >\r\n              登録\r\n            </button>\r\n          </form>\r\n        </div>\r\n\r\n      </div >\r\n\r\n\r\n\r\n\r\n    )\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport default withRouter(Register);\r\n","import React from 'react';\r\nimport './Toppage.css'\r\nimport Validation from './Validation';\r\nimport User from './User';\r\n// import Axios from 'axios';\r\nimport AxiosBase from 'axios';\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport Popover from \"react-popover\";\r\n// import Popover from '@material-ui/core/Popover';\r\n\r\nconst description = {\r\n    marginTop: 20,\r\n    fontSize: 12,\r\n}\r\n\r\nconst descriptiontext = {\r\n    margin: 0\r\n}\r\n\r\n\r\nconst Axios = AxiosBase.create({\r\n    baseURL: \"https://troument-api.net\"\r\n});\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: {\r\n                account: '',\r\n                password: '',\r\n            },\r\n\r\n            message: {\r\n                account: '',\r\n                password: '',\r\n            },\r\n            loading: false,\r\n            isOpen: false,\r\n            isPassOpen: false\r\n        }\r\n        this.loginUser = this.loginUser.bind(this)\r\n    }\r\n\r\n    loginUser = async (event) => {\r\n        console.log('ログイン実行されました')\r\n        event.preventDefault();\r\n        // const params = {\r\n        //     user_name: this.state.input.account,\r\n        //     password: this.state.input.password,\r\n        // }\r\n        Axios.post('/api/user_login', {\r\n            // params: params,\r\n            user_name: this.state.input.account,\r\n            password: this.state.input.password,\r\n        })\r\n            .then(response => {\r\n                console.log(response.data, 'responseが返ってきました')\r\n                if (typeof (response.data) === 'string') {\r\n                    if (response.data === 'パスワードが一致していません') {\r\n                        this.setState({\r\n                            isPassOpen: !this.state.isOpen,\r\n                            response_message: response.data\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            isOpen: !this.state.isOpen,\r\n                            response_message: response.data\r\n                        })\r\n\r\n                    }\r\n                } else {\r\n                    User.login(this.state.input.account, this.state.input.password);\r\n                    this.props.history.push({\r\n                        pathname: '/'\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n    }\r\n\r\n    inputCheck(event) {\r\n        event.preventDefault();\r\n        const key = event.target.name;\r\n        const value = event.target.value;\r\n        const { input, message } = this.state;\r\n        this.setState({\r\n            input: {\r\n                ...input,\r\n                [key]: event.target.value\r\n            },\r\n            message: {\r\n                ...message,\r\n                [key]: Validation.formValidate(key, value)\r\n            }\r\n        });\r\n    };\r\n\r\n    submitCheck = () => {\r\n        let validInput;\r\n        let validMessage;\r\n        const { loading } = this.state;\r\n\r\n        if (this.state.input.account === '' | this.state.input.password === '') {\r\n            validInput = false\r\n        } else {\r\n            validInput = true\r\n        }\r\n\r\n        if (this.state.message.account !== \"\" | this.state.message.password !== \"\") {\r\n            validMessage = false\r\n        } else {\r\n            validMessage = true\r\n        }\r\n\r\n        return validInput && validMessage && !loading && !this.state.isOpen\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            isOpen: false,\r\n            isPassOpen: false,\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { input, message } = this.state;\r\n        return (\r\n\r\n            <div className=\"wrappers\">\r\n                {/* <div> */}\r\n                <h1 className=\"login\">ログイン</h1>\r\n\r\n                <form className=\"account-form\">\r\n                    <div className=\"form-label-wrap\">\r\n                        <label className=\"account-form-label\">アカウント名<span className=\"form-span\">必須</span></label>\r\n                        <Popover\r\n                            isOpen={this.state.isOpen}\r\n                            place={'above'}\r\n                            body={\r\n                                <div className=\"popover\">\r\n                                    <p className=\"popover-text\">{this.state.response_message}</p>\r\n                                </div>\r\n                            }\r\n                            enterExitTransitionDurationMs={800}\r\n                        >\r\n                            <input className=\"form-input\"\r\n                                type=\"text\"\r\n                                name=\"account\"\r\n                                value={this.state.input.account}\r\n                                onChange={event => this.inputCheck(event)}\r\n                                onClick={this.handleClose}\r\n                            ></input>\r\n                        </Popover>\r\n                        <span className=\"account-form-bg\"></span>\r\n                    </div>\r\n                    <div className=\"form-label-wrap\">\r\n                        <label className=\"account-form-label\">パスワード<span className=\"form-span\">必須</span></label>\r\n                        <section style={{ position: 'relative' }}>\r\n                            {message.password && (\r\n                                <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, bottom: 0 }}>{message.password}</span>\r\n                            )}\r\n                        </section>\r\n                        <Popover\r\n                            isOpen={this.state.isPassOpen}\r\n                            place={'above'}\r\n                            body={\r\n                                <div className=\"popover\">\r\n                                    <p className=\"popover-text\">{this.state.response_message}</p>\r\n                                </div>\r\n                            }\r\n                            enterExitTransitionDurationMs={800}\r\n                        >\r\n                            <input className=\"form-input\"\r\n                                type=\"text\"\r\n                                name=\"password\"\r\n                                value={this.state.input.password}\r\n                                onChange={event => this.inputCheck(event)}\r\n                                onClick={this.handleClose}\r\n                            ></input>\r\n                        </Popover>\r\n                        <span className=\"account-form-bg\"></span>\r\n                    </div>\r\n                    <button className=\"login-button\"\r\n                        type=\"submit\"\r\n                        disabled={!this.submitCheck()}\r\n                        onClick={this.loginUser}\r\n                    >ログイン</button>\r\n                </form>\r\n                <div style={description}>\r\n                    <p style={descriptiontext}>アカウントは持っていますか？</p>\r\n                    <p style={descriptiontext}>まだの方はこちらから登録お願いします ⇨ <Link to=\"/Register\">会員登録</Link></p>\r\n                </div>\r\n                {/* </div> */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport User from './User';\r\n\r\n\r\nconst Auth = props =>\r\n  User.isLoggedIn() ? props.children : <Redirect to={'/Toppage'} />;\r\n\r\n  \r\nexport default Auth;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navigation extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todolists: this.props.todolists\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n        <nav className=\"navigation\">\r\n          <ul className=\"nav-items\">\r\n            <li className=\"nav-item\" onClick={() => { this.props.clickFormClose() }}><Link to=\"/\"><img src=\"/icon/home2.svg\" className=\"nav-item-icon nav-item-home\" alt=\"\" /><span className=\"nav-item-text\">ホーム</span></Link></li>\r\n            <li className=\"nav-item\" onClick={() => { this.props.postFormOpen() }}><Link to=\"/\"><img className=\"nav-item-icon nav-item-post\" alt=\"\" src=\"/icon/test1.svg\" /><span className=\"nav-item-text\">投稿</span></Link></li>\r\n            <li className=\"nav-item\"><Link to=\"/Search\"><img className=\"nav-item-icon nav-item-search\" alt=\"\" src=\"/icon/search.svg\" /><span className=\"nav-item-text\">検索</span></Link></li>\r\n            {/* <li className=\"nav-item\"><Link to=\"/Notify\"><img className=\"nav-item-icon nav-item-bell\" alt=\"\" src=\"/icon/bell.svg\" /><span className=\"nav-item-text\">通知</span></Link></li> */}\r\n            <li className=\"nav-item\"><Link to=\"/Mypage\"><img className=\"nav-item-icon nav-item-person\" alt=\"\" src=\"/icon/person.svg\" /><span className=\"nav-item-text\">マイページ</span></Link></li>\r\n          </ul>\r\n        </nav>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Avatar from 'react-avatar';\r\n\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\n\r\n\r\n// ****************************************************************///\r\n//  Todolistsの表示\r\n// ****************************************************************///\r\n\r\nclass Display extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todolists: this.props.todolists,\r\n      userinfo: this.props.userinfo,\r\n      isGood: false,\r\n      isMypage: this.props.isMypage,\r\n      isSearch: this.props.isSearch,\r\n      activePage: 15\r\n    }\r\n    this.callDisplayDetail = this.callDisplayDetail.bind(this)\r\n    this.handleGoodChange = this.handleGoodChange.bind(this)\r\n    this.goodCheck = this.goodCheck.bind(this)\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // Detailを表示する\r\n  // ****************************************************************///\r\n\r\n  callDisplayDetail(worry_id) {\r\n    this.props.history.push({\r\n      pathname: '/'\r\n    })\r\n    this.props.actionMethod.displayDetail(worry_id)\r\n  }\r\n\r\n\r\n\r\n  // ****************************************************************///\r\n  // 詳細を取得\r\n  // ****************************************************************///\r\n\r\n  componentDidMount() {\r\n    this.goodCheck()\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // グッドをしたことがあるかチェック\r\n  // ****************************************************************///\r\n\r\n  async goodCheck() {\r\n\r\n    if (this.props.detail_todolist) {\r\n\r\n      const goodcheck =\r\n        this.props.detail_todolist.user.goodlist.findIndex((good) => {\r\n          return good === this.props.detail_todolist._id\r\n        })\r\n\r\n      if (goodcheck === -1) {\r\n        this.setState(\r\n          {\r\n            isGood: false,\r\n            isGoodCheck: true\r\n          }\r\n        )\r\n      } else {\r\n        this.setState(\r\n          {\r\n            isGood: true,\r\n            isGoodCheck: true\r\n          }\r\n        )\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // goodしているか判定\r\n  // ****************************************************************///\r\n  async handleGoodChange() {\r\n    this.setState((state => {\r\n      return {\r\n        isGood: !this.state.isGood\r\n      }\r\n    }), () => this.props.actionMethod.handleGoodCount(this.props._id, !this.state.isGood)\r\n    )\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // render  \r\n  // ****************************************************************///\r\n\r\n  render() {\r\n    let createDetail;\r\n\r\n    if (this.props.isOpenDetail) {\r\n      createDetail = (\r\n        <div className={\"contents-wrappers \" + (this.state.isMypage ? \"mypage-diplay-wrapper\" : '')}>\r\n          <div className=\"contents-wrapper\">\r\n            <div className=\"content-icon-wrap\">\r\n              <Avatar size={\"50px\"} round={\"10px\"} className=\"content-icon\" src={\"https://troument.s3-ap-northeast-1.amazonaws.com/\" + this.props.detail_todolist.user.thumbnail} alt=\"\" />\r\n              {/* <Avatar size={\"50px\"} round={\"10px\"} className=\"content-icon\" src={\"https://troument.s3-ap-northeast-1.amazonaws.com/\" + this.props.thumbnail} alt=\"\" /> */}\r\n            </div>\r\n            <div className=\"content-wrapper\">\r\n              <div className=\"content-image-time\">\r\n                {this.props.detail_todolist.status\r\n                  ? <img className=\"content-image display-title-hukidasi\" src=\"/image/resolve.svg\" alt=\"\" />\r\n                  : <img className=\"content-image display-title-hukidasi\" src=\"/image/worry.svg\" alt=\"\" />}\r\n                <span className=\"content-time\">{this.props.actionMethod.createTime(this.props.detail_todolist.time)}</span>\r\n              </div>\r\n\r\n              <div className=\"content-text-tag\">\r\n                <p className=\"content-text\">{this.props.detail_todolist.title}</p>\r\n                {this.props.detail_todolist.tag && this.props.detail_todolist.tag.map((ta, tag_key) => {\r\n                  return <p key={tag_key} className=\"react-tags__display-tag\">{ta.name}</p>\r\n                })}\r\n              </div>\r\n              {this.props.detail_todolist.status &&\r\n                <p className=\"content-count\">{this.props.detail_todolist.count}人が感謝しています</p>\r\n              }\r\n            </div>\r\n          </div>\r\n          {\r\n            !this.props.isUpdateFormOpen && \r\n              (\r\n                <div className=\"content-button-wrapper\">\r\n\r\n                  {this.props.detail_todolist.status && (\r\n                    this.state.isGood\r\n                      ? <button className=\"content-button\" onClick={this.handleGoodChange}>参考になった\r\n                              <ThumbUpIcon className=\"content-button-icon\" style={{ fontSize: 18 }} />\r\n                      </button>\r\n                      : <button className=\"content-button\" onClick={this.handleGoodChange}>参考になった\r\n                              <ThumbUpAltOutlinedIcon className=\"content-button-icon\" style={{ fontSize: 18 }} />\r\n                      </button>\r\n\r\n                  )}\r\n\r\n                  {this.props.login_user === this.props.detail_todolist.username &&\r\n                    <div className=\"content-edit-button\">\r\n                      <button className=\"content-button\" onClick={this.props.actionMethod.updateFormOpen}>編集\r\n                            <EditIcon className=\"content-button-icon\" style={{ fontSize: 18 }} />\r\n                      </button>\r\n                      <button className=\"content-button\" onClick={this.props.deleteDialogOpen}>\r\n                        <span className=\"content-button-text\">削除</span>\r\n                        <DeleteIcon className=\"content-button-icon\" style={{ fontSize: 18 }} />\r\n                      </button>\r\n                    </div>\r\n                  }\r\n                </div>\r\n              )\r\n\r\n\r\n          }\r\n        </div >\r\n\r\n      )\r\n    } else {\r\n\r\n      createDetail = (\r\n        <React.Fragment>\r\n          {\r\n            this.props.todolists.map((todolist, i) => {\r\n              return <div key={i} className={\"contents-wrappers \" + (this.state.isSearch ? 'search-contents-wrappers' : this.state.isMypage ? 'mypage-contents-wrappers' : '')}>\r\n                <div onClick={() => { this.callDisplayDetail(todolist.worry_id) }} className=\"contents-wrapper\">\r\n\r\n                  <div className=\"content-icon-wrap\">\r\n                  {/* <Tooltip title=\"Add\" placement=\"top-end\"> */}\r\n                    <Avatar size={\"50px\"} round={\"10px\"} src={\"https://troument.s3-ap-northeast-1.amazonaws.com/\" + todolist.user.thumbnail} alt=\"\" />\r\n                    {/* </Tooltip> */}\r\n                  </div>\r\n\r\n                  <div className=\"content-wrapper\">\r\n                    <div className=\"content-image-time\">\r\n                      {todolist.status ? <img className=\"content-image display-title-hukidasi\" src=\"/image/resolve.svg\" alt=\"\" /> : <img className=\"dcontent-image display-title-hukidasi\" src=\"/image/worry.svg\" alt=\"\" />}\r\n                      <span className=\"content-time\">{this.props.actionMethod.createTime(todolist.time)}</span>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"content-text-tag\">\r\n                      <p className=\"content-text\">{todolist.title}</p>\r\n                      {todolist.tag && todolist.tag.map((ta, key) => {\r\n                        return <p key={key} className=\"react-tags__display-tag\">{ta.name}</p>\r\n                      })}\r\n\r\n                    </div>\r\n\r\n                    {todolist.status\r\n                      ? <p className=\"content-count\">{todolist.count}人が感謝しています</p>\r\n                      : <p className=\"content-count\">悩み中...　応援してください</p>\r\n                    }\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n            })\r\n          }\r\n        </React.Fragment>\r\n      )\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {createDetail}\r\n      </React.Fragment>\r\n    );\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default withRouter(Display);","import Embed from '@editorjs/embed'\r\nimport Table from '@editorjs/table'\r\nimport Paragraph from '@editorjs/paragraph'\r\nimport List from '@editorjs/list'\r\nimport Warning from '@editorjs/warning'\r\nimport Code from '@editorjs/code'\r\nimport LinkTool from '@editorjs/link'\r\nimport Image from '@editorjs/image'\r\nimport Raw from '@editorjs/raw'\r\nimport Header from '@editorjs/header'\r\nimport Quote from '@editorjs/quote'\r\nimport Marker from '@editorjs/marker'\r\nimport CheckList from '@editorjs/checklist'\r\nimport Delimiter from '@editorjs/delimiter'\r\nimport InlineCode from '@editorjs/inline-code'\r\nimport SimpleImage from '@editorjs/simple-image'\r\n\r\nexport const EDITOR_JS_TOOLS = {\r\n    embed: {\r\n        class: Embed,\r\n        config: {\r\n            youtube: true,\r\n        },\r\n        inlineToolbar: true\r\n    },\r\n    table: {\r\n        class: Table,\r\n        inlineToolbar: true,\r\n    },\r\n    paragraph: {\r\n        class: Paragraph,\r\n        inlineToolbar: true,\r\n        // config: {\r\n        //     placeholder: \"ここに入力してください\",\r\n        // }\r\n    },\r\n    list: {\r\n        class: List,\r\n        inlineToolbar: true\r\n    },\r\n    warning: {\r\n        class: Warning,\r\n        inlineToolbar: true,\r\n        config: {\r\n            titlePlaceholder: 'Title',\r\n            messagePlaceholder: 'Message',\r\n        },\r\n    },\r\n    code: {\r\n        class: Code,\r\n    },\r\n    linkTool: {\r\n        class: LinkTool,\r\n        inlineToolbar: true,\r\n        config: {\r\n            endpoint: 'http://localhost:8008/fetchUrl', // Your backend endpoint for url data fetching\r\n        }\r\n    },\r\n    // image: Image,\r\n    raw: {\r\n        class: Raw,\r\n        inlineToolbar: true,\r\n    },\r\n    header: {\r\n        class: Header,\r\n        config: {\r\n            placeholder: 'Enter a header',\r\n        },\r\n        inlineToolbar: true,\r\n    },\r\n    quote: {\r\n        class: Quote,\r\n        inlineToolbar: true,\r\n        config: {\r\n            quotePlaceholder: '引用する',\r\n            captionPlaceholder: '筆者 or 引用元',\r\n        },\r\n    },\r\n    marker: Marker,\r\n    checklist: {\r\n        class: CheckList,\r\n        inlineToolbar: true,\r\n    },\r\n\r\n    delimiter: {\r\n        class: Delimiter,\r\n        inlineToolbar: true,\r\n    },\r\n    inlineCode: {\r\n        class: InlineCode,\r\n        inlineToolbar: true,\r\n    },\r\n    simpleImage: {\r\n        class: SimpleImage,\r\n        inlineToolbar: true,\r\n    },\r\n}","import React from 'react';\r\nimport Popover from \"react-popover\";\r\nimport './App.css'\r\n\r\nclass FormButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen: false,\r\n      detail_todolist: this.props.detail_todolist || ''\r\n    }\r\n    this.togglePopover = this.togglePopover.bind(this)\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // 詳細を取得\r\n  // ****************************************************************///\r\n\r\n  async togglePopover() {\r\n    let title = this.props.title\r\n    let tags = this.props.tags\r\n    let savedData = this.props.savedData\r\n    const { handleWorryUpdate, handleWorryAdd, handleResolveUpdate, handleResolveAdd } = this.props.actionMethod || ''\r\n    this.setState(\r\n      {\r\n        isOpen: !this.state.isOpen,\r\n      }\r\n    );\r\n\r\n    this.props.isUpdateFormOpen\r\n      ? (this.state.detail_todolist.status\r\n        ? await handleResolveUpdate(savedData)\r\n        : await handleWorryUpdate(title, tags, savedData)\r\n      )\r\n\r\n      : (this.props.isOpenDetail\r\n        ? await handleResolveAdd(savedData)\r\n        : await handleWorryAdd(title, tags, savedData)\r\n      )\r\n\r\n  };\r\n\r\n  // ****************************************************************///\r\n  // 投稿ボタンが押されたとき\r\n  // ****************************************************************///\r\n\r\n  submit = async(event) => {\r\n    event.preventDefault();\r\n\r\n    this.props.startSending()\r\n    await this.togglePopover()\r\n    setTimeout(this.props.endSending, 1000)\r\n    this.props.handleOpen()\r\n    setTimeout(this.props.handleClose, 1500)\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // render\r\n  // ****************************************************************///\r\n\r\n  render() {\r\n    let createButton;\r\n    const { clickFormClose } = this.props.actionMethod || ''\r\n\r\n    if (this.props.isOpenDetail && !this.props.isFormOpen) {\r\n      if (this.props.login_user === this.props.detail_todolist.username) {\r\n        createButton = (\r\n          <div className=\"button-wrapper\">\r\n            <button onClick={this.props.actionMethod.resolveFormOpen} className=\"button\">解決投稿</button>\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      createButton = (\r\n        <div className=\"button-wrapper\">\r\n          <button onClick={clickFormClose} className=\"first-button button\">キャンセル</button>\r\n          <Popover\r\n            isOpen={this.state.isOpen}\r\n            body={\r\n              this.props.isResolveFormOpen\r\n                ? (this.props.handleResolveUpdate\r\n                  ? <div className=\"popover\"><p className=\"popover-text\">修正が完了しました！</p><p className=\"popover-text\">その調子！</p></div>\r\n                  : <div className=\"popover\"><p className=\"popover-text\">お疲れ様です！</p><p className=\"popover-text\">その調子！</p></div>)\r\n                : (this.props.handleWorryUpdate)\r\n                  ? (<div className=\"popover\"><p className=\"popover-text\">修正が完了しました</p><p className=\"popover-text\">頑張れー！</p></div>)\r\n                  : (<div className=\"popover\"><p className=\"popover-text\">頑張ってください！</p><p className=\"popover-text\">応援しています！</p></div>)\r\n\r\n            }\r\n            place={'above'}\r\n            enterExitTransitionDurationMs={800}\r\n          >\r\n            {\r\n              this.props.isStatus\r\n                ? <button disabled={!this.props.canSubmit()} onClick={this.submit} type=\"submit\" className=\"button\">投稿</button>\r\n                // : <button onClick={this.submit} type=\"submit\" className=\"button\">投稿</button>\r\n                : <button disabled={!this.props.canSubmit()} onClick={this.submit} type=\"submit\" className=\"button\">投稿</button>\r\n            }\r\n          </Popover>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {createButton}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormButton;","import React from 'react';\r\nimport Validation from './Validation';\r\nimport EditorJs from 'react-editor-js';\r\nimport { EDITOR_JS_TOOLS } from \"./editor-tool\";\r\n\r\nimport ReactTags from 'react-tag-autocomplete'\r\nimport suggestions from './skill'\r\nimport FormButton from './FormButton';\r\n\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { detail_todolist = '' } = this.props\r\n    const { title = '', tag = '', worry = '', status = '' } = detail_todolist\r\n\r\n    this.state = {\r\n      clickbutton: false,\r\n      form: true,\r\n      input: {\r\n        title: title,\r\n      },\r\n      message: {\r\n        title: '',\r\n        tag: '',\r\n        worry: '',\r\n        resolve: '',\r\n        savedData: ''\r\n      },\r\n      isSending: false,\r\n      tags: tag || [],\r\n      savedData: worry,\r\n      status: status,\r\n      suggestions,\r\n    }\r\n    this.changeInputText = this.changeInputText.bind(this)\r\n    this.saveEditor = this.saveEditor.bind(this)\r\n    this.canSubmit = this.canSubmit.bind(this)\r\n    this.startSending = this.startSending.bind(this)\r\n    this.endSending = this.endSending.bind(this)\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // Formに入力されてる文字を反映\r\n  // ****************************************************************///\r\n\r\n  changeInputText(event) {\r\n    event.preventDefault();\r\n    const key = event.target.name;\r\n    const value = event.target.value;\r\n    const { input, message } = this.state;\r\n    this.setState({\r\n      input: {\r\n        ...input,\r\n        [key]: event.target.value\r\n      },\r\n      message: {\r\n        ...message,\r\n        [key]: Validation.formValidate(key, value)\r\n      }\r\n    });\r\n  };\r\n\r\n  // ****************************************************************///\r\n  // Validation\r\n  // ****************************************************************///\r\n\r\n  canSubmit = () => {\r\n    let validInput;\r\n    let validMessage;\r\n    let validSavedDataInput\r\n    let validSavedDataMessage\r\n    let validTagsInput\r\n    let validTagsMessage\r\n    const { isSending } = this.state;\r\n    \r\n    \r\n    if (this.state.input.title === '') {\r\n      validInput = false\r\n    } else {\r\n      validInput = true\r\n    }\r\n\r\n    if (this.state.message.title !== \"\") {\r\n      validMessage = false\r\n    } else {\r\n      validMessage = true\r\n    }\r\n\r\n    if (this.state.tags.length === 0) {\r\n      validTagsInput = false\r\n    } else {\r\n      validTagsInput = true\r\n    }\r\n\r\n    if (this.state.message.tag !== \"\") {\r\n      validTagsMessage = false\r\n    } else {\r\n      validTagsMessage = true\r\n    }\r\n    \r\n    if (this.state.savedData === '' || this.state.savedData.blocks.length === 0) {\r\n      validSavedDataInput = false\r\n    } else {\r\n      validSavedDataInput = true\r\n    }\r\n\r\n    if (this.state.message.savedData !== \"\") {\r\n      validSavedDataMessage = false\r\n    } else {\r\n      validSavedDataMessage = true\r\n    }\r\n\r\n    return validInput && validMessage && \r\n           validSavedDataInput && validSavedDataMessage &&\r\n           validTagsInput && validTagsMessage &&\r\n           !isSending\r\n  };\r\n\r\n\r\n  // ****************************************************************///\r\n  // 送信が完了するのを待つ\r\n  // ****************************************************************///\r\n\r\n  startSending = () => {\r\n    this.setState({\r\n      isSending: true\r\n    })\r\n  }\r\n\r\n  endSending() {\r\n    this.setState({\r\n      isSending: false\r\n    })\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // タグの操作\r\n  // ****************************************************************///\r\n\r\n\r\n  handleDelete(i) {\r\n    const tags = this.state.tags.slice(0)\r\n    const { message } = this.state;\r\n    tags.splice(i, 1)\r\n    this.setState({\r\n      message: {\r\n        ...message,\r\n        tag: Validation.formValidate('tags', tags)\r\n      },\r\n      tags: tags\r\n    })\r\n  }\r\n\r\n\r\n  handleAddition(tag) {\r\n    const tags = [].concat(this.state.tags, tag)\r\n    const { message } = this.state;\r\n    this.setState({\r\n      message: {\r\n        ...message,\r\n        tag: Validation.formValidate('tags', tags)\r\n      },\r\n      tags: tags\r\n    })\r\n  }\r\n\r\n  handleBlur = () => {\r\n    const { message } = this.state;\r\n    this.setState({\r\n      message: {\r\n        ...message,\r\n        tag: Validation.formValidate('tags', this.state.tags)\r\n      },\r\n    })\r\n  }\r\n\r\n  handleBlurTitle = (event) => {\r\n    const key = event.target.name;\r\n    const value = event.target.value;\r\n    const { message } = this.state;\r\n    this.setState({\r\n      message: {\r\n        ...message,\r\n        [key]: Validation.formValidate(key, value)\r\n      },\r\n    })\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // Editorの保存\r\n  // ****************************************************************///\r\n  \r\n  \r\n  saveEditor = async () => {\r\n    const { message } = this.state;\r\n    let savedData = await this.editorInstance.save()\r\n    this.setState({\r\n      message: {\r\n        ...message,\r\n        savedData: Validation.formValidate('savedData', savedData)\r\n      },\r\n      savedData: savedData\r\n    })\r\n    \r\n  }\r\n\r\n\r\n\r\n  // ****************************************************************///\r\n  // render\r\n  // ****************************************************************///\r\n\r\n\r\n  render() {\r\n    let displayForm\r\n    const { input, message, status } = this.state;\r\n    // {this.props.detail_todolist && console.log(this.props.detail_todolist.resolve)}\r\n\r\n    if (status || this.props.isResolveFormOpen) {\r\n      displayForm = (\r\n        <form className=\"form-wrapper\">\r\n          <section className=\"form-wrapper-sec\" style={{ position: 'relative' }}>\r\n            <label>どうやって解決しましたか</label>\r\n            {message.savedData && (\r\n              <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, top: 3 }}>{message.savedData}</span>\r\n            )}\r\n          </section>\r\n          <div className=\"resolvetest\">\r\n            {this.props.detail_todolist\r\n              ? <EditorJs onChange={this.saveEditor} instanceRef={instance => this.editorInstance = instance} data={this.props.detail_todolist.resolve} tools={EDITOR_JS_TOOLS} enableReInitialize={false} />\r\n              // ? <EditorJs onChange={this.saveEditor} instanceRef={instance => this.editorInstance = instance} data={this.props.data_resolve} tools={EDITOR_JS_TOOLS} enableReInitialize={false} />\r\n              : <EditorJs onChange={this.saveEditor} instanceRef={instance => this.editorInstance = instance} tools={EDITOR_JS_TOOLS} enableReInitialize={false} />\r\n            }\r\n\r\n            <FormButton\r\n              {...this.props}\r\n              isFormOpen={this.props.isFormOpen}\r\n              savedData={this.state.savedData}\r\n              sendMethod={this.sendMethod}\r\n\r\n              canSubmit={this.canSubmit}\r\n              startSending={this.startSending}\r\n              endSending={this.endSending}\r\n            />\r\n          </div>\r\n        </form>\r\n      )\r\n    } else {\r\n      displayForm = (\r\n        <form className=\"form-wrapper\">\r\n\r\n          <section className=\"form-wrapper-sec\" style={{ position: 'relative' }}>\r\n            <label>タイトル</label><span className=\"form-span\">必須</span>\r\n            {message.title && (\r\n              <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, top: 3 }}>{message.title}</span>\r\n            )}\r\n            {this.state.input.title\r\n              ? <input\r\n                value={input.title}\r\n                type=\"text\"\r\n                name=\"title\"\r\n                onChange={event => this.changeInputText(event)}\r\n                onBlur={this.handleBlurTitle}\r\n                className=\"input-area\" \r\n                placeholder=\"悩みのタイトルを入力してください ※50文字以内\"></input>\r\n              : <input\r\n                name=\"title\"\r\n                value={input.title}\r\n                onBlur={this.handleBlurTitle}\r\n                onChange={event => this.changeInputText(event)}\r\n                className=\"input-area\" \r\n                placeholder=\"悩みのタイトルを入力してください ※50文字以内\"></input>\r\n            }\r\n          </section>\r\n\r\n          {/* フォームのタグ部分 */}\r\n\r\n          <section className=\"form-wrapper-sec\" style={{ position: 'relative' }}>\r\n            <label>タグ</label><span className=\"form-span\">必須</span>\r\n            {message.tag && (\r\n              <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, top: 3 }}>{message.tag}</span>\r\n            )}\r\n\r\n            <ReactTags\r\n              tags={this.state.tags}\r\n              suggestions={this.state.suggestions}\r\n              onDelete={this.handleDelete.bind(this)}\r\n              // handleAddition={this.handleAddition.bind(this)}\r\n              onAddition={this.handleAddition.bind(this)}\r\n              onBlur={this.handleBlur}\r\n              placeholderText={\"タグを追加してください\"}\r\n            />\r\n          </section>\r\n\r\n          {/* フォームの悩み入力部分 */}\r\n\r\n          <section className=\"form-wrapper-sec\" style={{ position: 'relative' }}>\r\n            <label>悩み</label><span className=\"form-span\">必須</span>\r\n            {message.savedData && (\r\n              <span style={{ color: 'red', fontSize: 8, position: 'absolute', right: 0, top: 3 }}>{message.savedData}</span>\r\n            )}\r\n            {/* {input.title */}\r\n            {this.props.detail_todolist\r\n              ? <EditorJs onChange={this.saveEditor} instanceRef={instance => this.editorInstance = instance} data={this.props.detail_todolist.worry} tools={EDITOR_JS_TOOLS} enableReInitialize={false} />\r\n              : <EditorJs onChange={this.saveEditor} instanceRef={instance => this.editorInstance = instance} tools={EDITOR_JS_TOOLS} enableReInitialize={false} />\r\n              // : <EditorJs onChange={this.saveEditor} instanceRef={instance => this.editorInstance = instance} data={this.props.detail_todolist.resolve} tools={EDITOR_JS_TOOLS} enableReInitialize={false} />\r\n            }\r\n          </section>\r\n\r\n          <FormButton\r\n            {...this.props}\r\n\r\n\r\n            title={input.title}\r\n            tags={this.state.tags}\r\n            savedData={this.state.savedData}\r\n            sendMethod={this.sendMethod}\r\n\r\n            canSubmit={this.canSubmit}\r\n            startSending={this.startSending}\r\n            endSending={this.endSending}\r\n            handleOpen={this.props.handleOpen}\r\n            handleClose={this.props.handleClose}\r\n          />\r\n        </form>\r\n      )\r\n    }\r\n\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {displayForm}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport FormButton from './FormButton';\r\nimport Display from './Display';\r\n// import Axios from 'axios';\r\nimport AxiosBase from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport EditorJs from 'react-editor-js';\r\n\r\nimport { EDITOR_JS_TOOLS } from \"./editor-tool\";\r\n\r\n\r\n// ****************************************************************///\r\n// LISTの詳細\r\n// ****************************************************************///\r\n\r\n\r\nconst Axios = AxiosBase.create({\r\n    baseURL: \"https://troument-api.net\"\r\n});\r\n\r\n\r\nclass Detail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isUpdateFormOpen: false,\r\n            isDeleteDialogOpen: false,\r\n            isGoodCheck: false,\r\n            isGood: false,\r\n            isOpenDetail: this.props.isOpenDetail,\r\n            isStatus: this.props.detail_todolist.status,\r\n            detail_todolist: this.props.detail_todolist\r\n        }\r\n        this.listDelete = this.listDelete.bind(this)\r\n        this.deleteDialogOpen = this.deleteDialogOpen.bind(this)\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 投稿した内容をリストから消去\r\n    // ****************************************************************///\r\n\r\n    listDelete() {\r\n        this.props.actionMethod.handleTodolistsDelete(this.state.detail_todolist.worry_id)\r\n\r\n        Axios.delete('/api/delete', {\r\n            data: { worry_id: this.state.detail_todolist.worry_id }\r\n        })\r\n            .then(response => {\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n\r\n        this.props.actionMethod.clickFormClose()\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 投稿したものを削除するとき、モーダルを表示する (実行)\r\n    // ****************************************************************///\r\n\r\n    deleteDialogOpen = () => {\r\n        this.setState(\r\n            {\r\n                isDeleteDialogOpen: true\r\n            }\r\n        )\r\n    };\r\n\r\n    // ****************************************************************///\r\n    // 削除時のモーダルを閉じる (キャンセル)\r\n    // ****************************************************************///\r\n\r\n    deleteDialogClose = () => {\r\n        this.setState(\r\n            {\r\n                isDeleteDialogOpen: false\r\n            }\r\n        )\r\n    };\r\n\r\n    // ****************************************************************///\r\n    // Editor.js readonly対応\r\n    // ****************************************************************///\r\n\r\n    getReadOnly = () => {\r\n        let worryElements = document.getElementById(\"worry\"); // id of editor element\r\n        let resolveElements = document.getElementById(\"resolve\"); // id of editor element\r\n\r\n        worryElements.style.pointerEvents = \"none\";\r\n\r\n        try {\r\n            resolveElements.style.pointerEvents = \"none\";\r\n        } catch (e) {\r\n            \r\n        }\r\n\r\n        let tool = document.querySelectorAll(\".ce-toolbar\");\r\n        for (let i = 0; i < tool.length; i++) {\r\n            tool[i].style.display = \"none\"\r\n        }\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // レンダリング\r\n    // ****************************************************************///    \r\n\r\n    render() {\r\n\r\n        let createDetail;\r\n        let login_user = this.props.login_user\r\n\r\n        if (this.state.isStatus) {\r\n            createDetail = (\r\n                <React.Fragment>\r\n                    <div className=\"detail-wrapper\">\r\n                        <section>\r\n                            <h1 className=\"detail-section\">\r\n                                悩みの詳細\r\n                            </h1>\r\n                        </section>\r\n                        <div className=\"detail-area\">\r\n                            <EditorJs onReady={this.getReadOnly} holder=\"worry\" data={this.state.detail_todolist.worry} enableReInitialize={true} instanceRef={instance => this.editorInstance = instance} tools={EDITOR_JS_TOOLS}>\r\n                                <div id=\"worry\" />\r\n                            </EditorJs>\r\n                        </div>\r\n                        <section>\r\n                            <h1 className=\"detail-section\">\r\n                                解決詳細\r\n                             </h1>\r\n                        </section>\r\n                        <div className=\"detail-area\">\r\n                            <EditorJs holder=\"resolve\" data={this.state.detail_todolist.resolve} enableReInitialize={true} instanceRef={instance => this.editorInstance = instance} tools={EDITOR_JS_TOOLS}>\r\n                                <div id=\"resolve\" />\r\n                            </EditorJs>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        } else {\r\n            createDetail = (\r\n                <React.Fragment>\r\n                    <div className=\"detail-wrapper\">\r\n                        <section>\r\n                            <h1 className=\"detail-section\">\r\n                                悩み中\r\n                            </h1>\r\n                        </section>\r\n                        <div className=\"detail-area\">\r\n                            <EditorJs onReady={this.getReadOnly} holder=\"worry\" data={this.state.detail_todolist.worry} enableReInitialize={true} instanceRef={instance => this.editorInstance = instance} tools={EDITOR_JS_TOOLS}>\r\n                                <div id=\"worry\" />\r\n                            </EditorJs>\r\n                        </div>\r\n                        <FormButton\r\n                            actionMethod={this.props.actionMethod}\r\n                            isStatus={this.state.isStatus}\r\n                            detail_todolist={this.props.detail_todolist}\r\n                            login_user={login_user}\r\n                            isUpdateFormOpen={this.state.isUpdateFormOpen}\r\n                            isOpenDetail={this.state.isOpenDetail}\r\n                        />\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n\r\n        return (\r\n            // <React.Fragment>\r\n            <div className=\"display-title-wrapper\">\r\n                <Display\r\n                    {...this.props}\r\n                    isOpenDetail={this.props.isOpenDetail}\r\n                    isGood={this.state.isGood}\r\n                    isUpdateFormOpen={this.state.isUpdateFormOpen}\r\n\r\n                    deleteDialogOpen={this.deleteDialogOpen}\r\n                    goodCheck={this.goodCheck}\r\n                    actionMethod={this.props.actionMethod}\r\n\r\n                    _id={this.state.detail_todolist._id}\r\n                />\r\n\r\n                {createDetail}\r\n\r\n                <Dialog\r\n                    open={this.state.isDeleteDialogOpen}\r\n                    onClose={this.deleteDialogClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{this.state.isStatus ? \"解決したものを削除しようとしています\" : \"悩み中のものを削除しようとしています\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            削除してもよろしいですか？\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.deleteDialogClose} color=\"primary\">\r\n                            キャンセル\r\n                        </Button>\r\n                        <Button onClick={this.listDelete} color=\"primary\" autoFocus>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n            </div >\r\n            // </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from 'react';\r\n\r\nclass Notify extends React.Component{\r\n    render()\r\n    {\r\n      return (\r\n        <div className=\"notify-wrapper\">\r\n          <div className=\"notify\">\r\n            <img alt=\"Notify\" className=\"notify-icon\" src=\"/icon/moyamoya.svg\" />\r\n            <p className=\"notify-text\">悩みタイトル</p>\r\n          </div>\r\n          <p className=\"notify-contect\">○○さんがあなたと同じ悩みを持っています</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Notify;","import React from 'react';\r\nimport Display from './Display';\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchLists: [],\r\n      todolists: this.props.todolists,\r\n      searchWord: '',\r\n      isSearch: true,\r\n      isHome: false\r\n    }\r\n    this.filterSearchWord = this.filterSearchWord.bind(this)\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // 文字が入力されるたびにsearchDisplayを実行する \r\n  // ****************************************************************///\r\n\r\n  filterSearchWord(e) {\r\n    const value = e.target.value;\r\n    this.setState({\r\n      searchWord: value\r\n    }, () => {\r\n      this.searchDisplay(this.state.searchWord)\r\n    })\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // 検索結果を表示する\r\n  // ****************************************************************///\r\n\r\n\r\n  searchDisplay(searchWord) {\r\n\r\n    if (searchWord !== '') {\r\n      const filterList =\r\n        this.props.todolists &&\r\n        this.props.todolists.filter((todolist) => {\r\n          return (\r\n            (todolist.title && todolist.title.toString().toLowerCase().indexOf(searchWord.toLowerCase()) !== -1) ||\r\n            (todolist.tag[0].name && todolist.tag[0].name.toString().toLowerCase().indexOf(searchWord.toLowerCase()) !== -1) ||\r\n            (todolist.worry.blocks[0].data.text && todolist.worry.blocks[0].data.text.toString().toLowerCase().indexOf(searchWord.toLowerCase()) !== -1)\r\n          )\r\n        }\r\n        )\r\n\r\n      this.setState({\r\n        searchLists: filterList,\r\n      }\r\n      )\r\n\r\n    }\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // 検索欄に文字が入力されているかで表示を切り替える\r\n  // ****************************************************************///\r\n\r\n  render() {\r\n    let searchResult;\r\n\r\n    if (this.state.searchWord === '') {\r\n      searchResult = (\r\n        <div className=\"search-wrapper\">\r\n          <img className=\"search-image\" src=\"/icon/Search_unDraw.svg\" alt=\"Search\" />\r\n          <div className=\"search-text-wrapper\">\r\n            <p className=\"search-text\">同じ悩みを抱えている人がいるかもしれません</p>\r\n            <p className=\"search-text\">検索してみましょう！</p>\r\n          </div>\r\n\r\n        </div>\r\n      )\r\n    } else {\r\n      searchResult = (\r\n          <Display\r\n            actionMethod={this.props.actionMethod}\r\n            todolists={this.state.searchLists}\r\n            isSearch={this.state.isSearch}\r\n          />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"search-form-wrapper\">\r\n          <form className=\"search-form\">\r\n            <input value={this.state.searchWord} className=\"search-input input-area\" onChange={e => this.filterSearchWord(e)} placeholder=\"検索\"></input>\r\n          </form>\r\n        </div>\r\n        {searchResult}\r\n      </React.Fragment>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport Display from './Display';\r\nimport User from './User';\r\nimport AxiosBase from 'axios';\r\n// import Axios from 'axios';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport Avatar from 'react-avatar';\r\n\r\nconst Axios = AxiosBase.create({\r\n  baseURL: \"https://troument-api.net\"\r\n});\r\n\r\n\r\nclass Mypage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      resultLists: [],\r\n      todolists: [],\r\n      worryCount: [],\r\n      resolveCount: [],\r\n      isActive: 0,\r\n      open: false,\r\n      files: [],\r\n      userInfo: this.props.userinfo,\r\n      // thumbnail: this.props.userinfo.thumbnail,\r\n      isMypage: true,\r\n      alltodolists: this.props.todolists,\r\n      src: null,\r\n      crop: {\r\n        unit: '%',\r\n        width: 30,\r\n        aspect: 16 / 9,\r\n      },\r\n    }\r\n    this.worryListDisplay = this.worryListDisplay.bind(this)\r\n    this.resolveListDisplay = this.resolveListDisplay.bind(this)\r\n    this.usefulListDisplay = this.usefulListDisplay.bind(this)\r\n    this.getMypageTodolists = this.getMypageTodolists.bind(this)\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.getTodoListCount()\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // ログインしているユーザーのLISTデータ取得\r\n  // ****************************************************************///\r\n\r\n  async getTodoListCount() {\r\n\r\n    await this.getMypageTodolists()\r\n\r\n    const worryCount =\r\n      this.state.todolists &&\r\n      this.state.todolists.filter((todolist) => {\r\n        return todolist.status === false\r\n      }\r\n      )\r\n\r\n    const resolveCount =\r\n      this.state.todolists &&\r\n      this.state.todolists.filter((todolist) => {\r\n        return todolist.status === true\r\n      }\r\n      )\r\n\r\n\r\n    const filterList =\r\n      this.state.todolists &&\r\n      this.state.todolists.filter((todolist) => {\r\n        return todolist.status === false\r\n      }\r\n      )\r\n\r\n    this.setState({\r\n      worryCount: worryCount,\r\n      resolveCount: resolveCount,\r\n      goodCount: this.state.goodlist.length || 0,\r\n      resultLists: filterList,\r\n    })\r\n\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // ログインしているユーザーのTodolistsの取得\r\n  // ****************************************************************///\r\n\r\n  async getMypageTodolists() {\r\n    const login_user = User.LoggedUser()\r\n    this.setState({\r\n      username: login_user\r\n    })\r\n    const param = {\r\n      username: login_user,\r\n    }\r\n\r\n\r\n    // ****************************************************************///\r\n    // いいねしているデータを取得\r\n    // ****************************************************************///\r\n\r\n    await Axios.get('/api/mygoodinfo', { params: param })\r\n      .then(response => {\r\n        this.setState((state => {\r\n          return { goodlist: response.data }\r\n        })\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.error(new Error(err))\r\n      })\r\n\r\n    // ****************************************************************///\r\n    // ログインユーザー情報からサムネイル取得\r\n    // ****************************************************************///\r\n\r\n    await Axios.get('/api/userinfo', { params: param })\r\n      .then(response => {\r\n        this.setState((state => {\r\n          return { thumbnail: response.data.thumbnail }\r\n        })\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.error(new Error(err))\r\n      })\r\n\r\n    // ****************************************************************///\r\n    // ユーザー情報を関連つけたデータを取得\r\n    // ****************************************************************///\r\n\r\n    await Axios.get('/api/mypage', { params: param })\r\n      .then(response => {\r\n        this.setState((state => {\r\n          return { todolists: response.data.reverse() }\r\n          // return { todolists: response.data.reverse(), loading: true }\r\n        })\r\n        )\r\n      })\r\n      .catch(err => {\r\n        console.error(new Error(err))\r\n      })\r\n  }\r\n\r\n\r\n\r\n  // ****************************************************************///\r\n  // 悩み中のリストを取得\r\n  // ****************************************************************///\r\n\r\n  worryListDisplay = () => {\r\n\r\n    const filterList =\r\n      this.state.todolists &&\r\n      this.state.todolists.filter((todolist) => {\r\n        return todolist.status === false\r\n      }\r\n      )\r\n    this.setState({\r\n      resultLists: filterList,\r\n      isActive: 0\r\n    })\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // 解決済のリストを取得\r\n  // ****************************************************************///\r\n\r\n  resolveListDisplay() {\r\n    const filterList =\r\n      this.state.todolists &&\r\n      this.state.todolists.filter((todolist) => {\r\n        return todolist.status === true\r\n      }\r\n      )\r\n    this.setState({\r\n      resultLists: filterList,\r\n      isActive: 1\r\n    }\r\n    )\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // グッドしているリストを取得\r\n  // ****************************************************************///\r\n\r\n  usefulListDisplay() {\r\n    if (this.state.goodlist) {\r\n      this.setState({\r\n        resultLists: this.state.goodlist,\r\n        isActive: 2\r\n      }\r\n      )\r\n    } else {\r\n      this.setState({\r\n        resultLists: [],\r\n        isActive: 2\r\n      }\r\n      )\r\n    }\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // トリミングされた画像を保存\r\n  // ****************************************************************///\r\n\r\n  sendPicToS3 = () => {\r\n    const login_user = User.LoggedUser()\r\n    this.setState({\r\n      username: login_user\r\n    })\r\n\r\n\r\n    const formData = new FormData();\r\n    formData.append('Files', this.state.croppedImageUrl)\r\n    formData.append('username', this.state.username)\r\n\r\n    Axios.post('/api/files',\r\n      formData,\r\n    ).then(response => {\r\n      this.setState((state => {\r\n        return { thumbnail: this.state.croppedImageUrl }\r\n      }), () => this.handleReload()\r\n      )\r\n    }\r\n    )\r\n\r\n    this.setState({\r\n      isPicOpen: false\r\n    })\r\n  }\r\n\r\n  // ****************************************************************///\r\n  // 選択された範囲でトリミングを実施  ライブラリ：react-image-crop\r\n  // ****************************************************************///\r\n\r\n  onSelectFile = e => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener('load', () =>\r\n        this.setState((state => {\r\n          return {\r\n            src: reader.result,\r\n            isPicOpen: true,\r\n          }\r\n        })\r\n        )\r\n      );\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n\r\n  onImageLoaded = image => {\r\n    this.imageRef = image;\r\n  };\r\n\r\n  onCropComplete = crop => {\r\n    this.makeClientCrop(crop);\r\n  };\r\n\r\n  onCropChange = (crop, percentCrop, files) => {\r\n    // You could also use percentCrop:\r\n    // this.setState({ crop: percentCrop });\r\n    this.setState({ crop });\r\n  };\r\n\r\n  async makeClientCrop(crop) {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.getCroppedImg(\r\n        this.imageRef,\r\n        crop,\r\n        this.state.username\r\n      );\r\n      this.setState({ croppedImageUrl });\r\n    }\r\n  }\r\n\r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement('canvas');\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob(blob => {\r\n        if (!blob) {\r\n          console.error('Canvas is empty');\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        window.URL.revokeObjectURL(this.fileUrl);\r\n        this.fileUrl = window.URL.createObjectURL(blob);\r\n        resolve(blob);\r\n      }, 'image/png');\r\n    });\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // サムネイル更新後、情報再取得\r\n  // ****************************************************************///\r\n\r\n  handleReload() {\r\n    this.props.getTodolists()\r\n    this.getTodoListCount()\r\n  }\r\n\r\n\r\n  // ****************************************************************///\r\n  // 画像のトリミングをキャンセル\r\n  // ****************************************************************///\r\n\r\n  canSendPic = () => {\r\n    this.setState(\r\n      {\r\n        isPicOpen: false\r\n      }\r\n    )\r\n  };\r\n\r\n  // ****************************************************************///\r\n  // render\r\n  // ****************************************************************///\r\n\r\n  render() {\r\n    console.log(this.state.resultLists)\r\n    const { crop, src } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"profile-wrapper\">\r\n          <div className=\"profile-header\">\r\n            <div className=\"profile\">\r\n              <label className=\"sample\">\r\n                <Avatar size={\"50px\"} round={\"10px\"} alt=\"PROFILE\" src={\"https://troument.s3-ap-northeast-1.amazonaws.com/\" + this.state.thumbnail} />\r\n                <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\r\n              </label>\r\n              <p className=\"profile_name\">{this.state.username}</p>\r\n            </div>\r\n            <div className=\"profile-count\">\r\n              <ul className=\"count-lists\">\r\n                <li className=\"count-list\"><p className=\"count-list-number\">{this.state.worryCount.length}</p><p className=\"count-list-text\">悩み中</p></li>\r\n                <li className=\"count-list\"><p className=\"count-list-number\">{this.state.resolveCount.length}</p><p className=\"count-list-text\">解決済</p></li>\r\n                <li className=\"count-list\"><p className=\"count-list-number\">{this.state.goodCount}</p><p className=\"count-list-text\">スコア</p></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <Modal\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.isPicOpen}\r\n            onClose={this.CliskcPicClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n              timeout: 500,\r\n            }}\r\n          >\r\n            <Fade in={this.state.isPicOpen}>\r\n              <div className=\"modal\">\r\n                {src && (\r\n                  <ReactCrop\r\n                    src={src}\r\n                    crop={crop}\r\n                    ruleOfThirds\r\n                    onImageLoaded={this.onImageLoaded}\r\n                    onComplete={this.onCropComplete}\r\n                    onChange={this.onCropChange}\r\n                  />\r\n                )}\r\n                <div className=\"button-wrapper crop-button\">\r\n                  <button className=\"button\" onClick={this.canSendPic}>キャンセル</button>\r\n                  <button className=\"button\" onClick={this.sendPicToS3}>決定</button>\r\n                </div>\r\n              </div>\r\n            </Fade>\r\n          </Modal>\r\n\r\n\r\n\r\n          <div className=\"lists\">\r\n            <button className={\"listbutton \" + (this.state.isActive === 0 ? 'active' : '')}><span onClick={this.worryListDisplay} className=\"list worry-list\">悩み一覧</span></button>\r\n            <button className={\"listbutton \" + (this.state.isActive === 1 ? 'active' : '')}><span onClick={this.resolveListDisplay} className=\"list resolve-list\">解決済一覧</span></button>\r\n            <button className={\"listbutton \" + (this.state.isActive === 2 ? 'active' : '')}><span onClick={this.usefulListDisplay} className=\"list useful-list\">役立ち一覧</span></button>\r\n          </div>\r\n        </div>\r\n        <div className=\"display-title-wrapper\">\r\n\r\n          {this.state.resultLists.length !== 0\r\n            ? <Display\r\n              todolists={this.state.resultLists}\r\n              actionMethod={this.props.actionMethod}\r\n              isMypage={this.state.isMypage}\r\n            />\r\n            : <p className=\"mypage-contents-wrappers mypage-no-data\">データが存在しません</p>\r\n            // : <CircularProgress />\r\n          }\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mypage;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport Display from './Display';\r\nimport Form from './Form';\r\nimport Detail from './Detail';\r\nimport Notify from './Notify';\r\nimport Search from './Search';\r\nimport Mypage from './Mypage';\r\nimport Auth from './Auth';\r\nimport User from './User';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css'\r\nimport AxiosBase from 'axios';\r\n// import Axios from 'axios';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\n// ****************************************************************///\r\n//  初期画面\r\n// ****************************************************************///\r\n\r\nconst Axios = AxiosBase.create({\r\n    baseURL: \"https://troument-api.net\"\r\n  });\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isFormOpen: false,\r\n            isResolveFormOpen: false,\r\n            todolists: [] || this.props.todolists,\r\n            userinfo: [] || this.props.userinfo,\r\n            isOpenDetail: false,\r\n            popover: false,\r\n            isGood: false,\r\n            loading: false,\r\n            isHome: true\r\n\r\n        }\r\n        this.clickFormClose = this.clickFormClose.bind(this)\r\n        this.handleWorryAdd = this.handleWorryAdd.bind(this)\r\n        this.handleResolveAdd = this.handleResolveAdd.bind(this)\r\n        this.displayDetail = this.displayDetail.bind(this)\r\n        this.handleWorryUpdate = this.handleWorryUpdate.bind(this)\r\n        this.handleResolveUpdate = this.handleResolveUpdate.bind(this)\r\n        this.handleTodolistsDelete = this.handleTodolistsDelete.bind(this)\r\n        this.createTime = this.createTime.bind(this)\r\n        this.handleGoodCount = this.handleGoodCount.bind(this)\r\n        this.gooStatusCheck = this.gooStatusCheck.bind(this)\r\n        this.getTodolists = this.getTodolists.bind(this)\r\n        this.updateFormOpen = this.updateFormOpen.bind(this)\r\n        this.resolveFormOpen = this.resolveFormOpen.bind(this)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.getTodolists()\r\n        this.getUserinfo()\r\n\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // Todolistsの取得\r\n    // ****************************************************************///\r\n\r\n    getTodolists() {\r\n        const login_user = User.LoggedUser()\r\n        this.setState({\r\n            login_user: login_user\r\n        })\r\n        Axios.get('/api/display')\r\n            .then(response => {\r\n                this.setState((state => {\r\n                    return { todolists: response.data.reverse(), loading: true }\r\n                })\r\n                )\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // ログインしているユーザーの情報取得\r\n    // ****************************************************************///\r\n\r\n    getUserinfo() {\r\n        const login_user = User.LoggedUser()\r\n        const param = {\r\n            username: login_user,\r\n        }\r\n        Axios.get('/api/userinfo', { params: param })\r\n            .then(response => {\r\n                this.setState((state => {\r\n                    return { userinfo: response.data, loading: true }\r\n                })\r\n                )\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n    }\r\n\r\n    // ****************************************************************///\r\n    //  悩みを投稿  ホーム画面のボタンから投稿\r\n    // ****************************************************************///\r\n\r\n    async handleWorryAdd(title, tags, savedData) {\r\n        this.setState((state => {\r\n            return { loading: false }\r\n        }))\r\n        let time = this.createTime()\r\n\r\n        this.clickFormClose()\r\n        const shortid = require('shortid');\r\n        let worry_id = shortid.generate()\r\n\r\n        const list = {\r\n            username: this.state.userinfo.user_name,\r\n            title: title,\r\n            tag: tags,\r\n            worry: savedData,\r\n            resolve: '',\r\n            site: '',\r\n            status: false,\r\n            time: time,\r\n            worry_id: worry_id\r\n        }\r\n\r\n\r\n        Axios.post('/api/worryadd', {\r\n            list: list,\r\n        })\r\n            .then(response => {\r\n                response.data.user = this.state.userinfo\r\n                this.state.todolists.unshift(\r\n                    response.data\r\n                );\r\n                this.setState((state => {\r\n                    return { todolists: this.state.todolists, loading: true }\r\n                }));\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n\r\n    }\r\n\r\n\r\n    // ****************************************************************///\r\n    // 解決方法の投稿   detailコンポーネントのresolveAddから実行\r\n    // ****************************************************************///\r\n\r\n    async handleResolveAdd(savedData) {\r\n        let time = this.createTime()\r\n\r\n        await this.handleTodolistsDelete(this.state.detail_todolist.worry_id)\r\n        let detail_todolist = this.state.detail_todolist\r\n\r\n        detail_todolist.resolve = savedData\r\n        detail_todolist.status = true\r\n        detail_todolist.time = time\r\n\r\n        this.state.todolists.unshift(detail_todolist);\r\n        this.setState((state => {\r\n            return { todolists: this.state.todolists }\r\n        })\r\n        );\r\n\r\n        Axios.put('/api/resolveadd', {\r\n            resolve: savedData,\r\n            worry_id: this.state.detail_todolist.worry_id,\r\n            status: true,\r\n            time: time\r\n        })\r\n            .then(response => {\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n\r\n        this.clickFormClose()\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 　選択された投稿をtodolistsから削除する state\r\n    // ****************************************************************///\r\n\r\n\r\n    async handleTodolistsDelete(worry_id) {\r\n        const new_todolists =\r\n            this.state.todolists.filter((todolist) => {\r\n                return todolist.worry_id !== worry_id\r\n            })\r\n        this.setState(\r\n            {\r\n                todolists: new_todolists\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 悩みの編集 Detailコンポーネントの1worryUpdateから実行\r\n    // ****************************************************************///\r\n\r\n    async handleWorryUpdate(title, tag, savedData) {\r\n        let time = this.createTime()\r\n        await this.handleTodolistsDelete(this.state.detail_todolist.worry_id)\r\n\r\n        let detail_todolist = this.state.detail_todolist\r\n\r\n        detail_todolist.title = title\r\n        detail_todolist.tag = tag\r\n        detail_todolist.worry = savedData\r\n        detail_todolist.time = time\r\n\r\n        this.state.todolists.unshift(detail_todolist);\r\n        this.setState((state => {\r\n            return { todolists: this.state.todolists }\r\n        })\r\n        );\r\n        // const url = constUrl + '/api/listupdate'\r\n        Axios.post('/api/listupdate', {\r\n            detail_todolist: this.state.detail_todolist,\r\n        })\r\n            .then(response => {\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n\r\n\r\n        this.clickFormClose()\r\n\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 解決の編集DetailコンポーネントのresolveUpdateから実行\r\n    // ****************************************************************///\r\n\r\n    async handleResolveUpdate(savedData) {\r\n        let time = this.createTime()\r\n        await this.handleTodolistsDelete(this.state.detail_todolist.worry_id)\r\n\r\n\r\n        let detail_todolist = this.state.detail_todolist\r\n\r\n        detail_todolist.resolve = savedData\r\n        detail_todolist.time = time\r\n\r\n        this.state.todolists.unshift(detail_todolist);\r\n        this.setState((state => {\r\n            return { todolists: this.state.todolists }\r\n        })\r\n        );\r\n\r\n        Axios.post('/api/listupdate', {\r\n            detail_todolist: this.state.detail_todolist,\r\n        })\r\n            .then(response => {\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n\r\n        this.clickFormClose()\r\n    }\r\n\r\n\r\n    // ****************************************************************///\r\n    // worry_idが一致する詳細を表示\r\n    // ****************************************************************///\r\n\r\n    displayDetail(worry_id) {\r\n\r\n        const detail_todolist =\r\n            this.state.todolists.filter((todolist) => {\r\n                return todolist.worry_id === worry_id\r\n            })\r\n\r\n        this.setState({\r\n            isOpenDetail: true,\r\n            detail_todolist: detail_todolist[0],\r\n        })\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 解決ボタンが押された時に実行\r\n    // ****************************************************************///\r\n\r\n    resolveFormOpen() {\r\n        this.setState({\r\n            isResolveFormOpen: true,\r\n            isFormOpen: true\r\n        })\r\n    }\r\n\r\n\r\n    // ****************************************************************///\r\n    // 悩み・解決を投稿するFormを表示\r\n    // ****************************************************************///\r\n\r\n    postFormOpen = () => {\r\n        this.setState(\r\n            {\r\n                isFormOpen: true,\r\n                isResolveFormOpen: false,\r\n                isUpdateFormOpen: false,\r\n                isOpenDetail: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 悩み・解決を投稿するFormをクローズ. 投稿後のポップアップ表示\r\n    // ****************************************************************///\r\n\r\n    clickFormClose() {\r\n\r\n        this.setState(\r\n            {\r\n                isResolveFormOpen: false,\r\n                isUpdateFormOpen: false,\r\n                isOpenDetail: false,\r\n                isFormOpen: false,\r\n                pop_open: true,\r\n            }\r\n        )\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // 投稿したものを編集するフォームを表示\r\n    // ****************************************************************///\r\n\r\n    updateFormOpen() {\r\n        this.setState(\r\n            {\r\n                isFormOpen: true,\r\n                isUpdateFormOpen: true\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    // ****************************************************************///\r\n    //  時間のFormatを変換 \r\n    // ****************************************************************///\r\n\r\n    createTime(time) {\r\n        let now_time\r\n\r\n        if (time) {\r\n            now_time = new Date(time)\r\n            now_time = now_time.toLocaleString()\r\n        } else {\r\n            now_time = new Date()\r\n        }\r\n\r\n        return now_time\r\n    }\r\n\r\n\r\n    // ****************************************************************///\r\n    //  goodの確認\r\n    // ****************************************************************///\r\n\r\n    handleGoodCount(_id, isGood) {\r\n        this.gooStatusCheck(_id, isGood)\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // goodした履歴があるかチェック\r\n    // ****************************************************************///\r\n\r\n    async gooStatusCheck(_id, isGood) {\r\n\r\n        if (isGood) {\r\n            this.goodDeleteCheck(_id)\r\n        } else {\r\n            this.goodAddCheck(_id)\r\n        }\r\n    }\r\n\r\n    // ****************************************************************///\r\n    //  goodした履歴がない場合追加する\r\n    // ****************************************************************///\r\n\r\n    async goodAddCheck(_id) {\r\n        let CountUp = []\r\n        CountUp = this.state.detail_todolist\r\n        CountUp.count = CountUp.count + 1\r\n        CountUp.user.goodlist.push(_id)\r\n\r\n        this.setState((state => {\r\n            return {\r\n                detail_todolist: CountUp\r\n            }\r\n        })\r\n        )\r\n\r\n        const param = {\r\n            _id: _id,\r\n            username: this.state.login_user,\r\n            count: this.state.detail_todolist.count\r\n        }\r\n\r\n        Axios.get('/api/goodadd', {\r\n            params: param\r\n        })\r\n            .then(response => {\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n    }\r\n\r\n    // ****************************************************************///\r\n    // goodした履歴がある場合、削除\r\n    // ****************************************************************///\r\n\r\n    async goodDeleteCheck(_id) {\r\n        let CountUp = []\r\n        CountUp = this.state.detail_todolist\r\n        CountUp.count = CountUp.count - 1\r\n\r\n\r\n        const goodcheck =\r\n            this.state.detail_todolist.user.goodlist.findIndex((good) => {\r\n                return good === _id\r\n            })\r\n\r\n        CountUp.user.goodlist.splice(goodcheck, 1)\r\n\r\n        this.setState((state => {\r\n            return {\r\n                detail_todolist: CountUp\r\n            }\r\n        })\r\n        )\r\n        const param = {\r\n            _id: _id,\r\n            username: this.state.login_user,\r\n            count: this.state.detail_todolist.count\r\n        }\r\n\r\n        Axios.get('/api/gooddelete', { params: param })\r\n            .then(response => {\r\n            })\r\n            .catch(err => {\r\n                console.error(new Error(err))\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n    handleOpen = () => {\r\n        this.setState({\r\n            setOpen: true\r\n        })\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            setOpen: false\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n    // ****************************************************************///\r\n    // render    stateとpropsに変化があった場合に呼び出される\r\n    // ****************************************************************///\r\n\r\n    render() {\r\n        let homeDisplay\r\n        const actionMethod = {\r\n            handleResolveAdd: this.handleResolveAdd,\r\n            handleWorryUpdate: this.handleWorryUpdate,\r\n            handleResolveUpdate: this.handleResolveUpdate,\r\n            handleTodolistsDelete: this.handleTodolistsDelete,\r\n            clickFormClose: this.clickFormClose,\r\n            postFormOpen: this.postFormOpen,\r\n            createTime: this.createTime,\r\n            handleGoodCount: this.handleGoodCount,\r\n            goodAddCheck: this.goodAddCheck,\r\n            goodDeleteCheck: this.goodDeleteCheck,\r\n            displayDetail: this.displayDetail,\r\n            handleWorryAdd: this.handleWorryAdd,\r\n            updateFormOpen: this.updateFormOpen,\r\n            resolveFormOpen: this.resolveFormOpen\r\n        }\r\n\r\n\r\n        if (this.state.isFormOpen) {\r\n\r\n            this.state.isOpenDetail\r\n\r\n                ? homeDisplay = (\r\n                    <React.Fragment>\r\n                        <div className=\"display-title-wrapper\">\r\n                            <Display\r\n                                {...this.props}\r\n                                isOpenDetail={this.state.isOpenDetail}\r\n                                isGood={this.state.isGood}\r\n                                detail_todolist={this.state.detail_todolist}\r\n                                isUpdateFormOpen={this.state.isUpdateFormOpen}\r\n\r\n                                deleteDialogOpen={this.deleteDialogOpen}\r\n                                actionMethod={actionMethod}\r\n                                userinfo={this.state.userinfo}\r\n                                _id={this.state.detail_todolist._id}\r\n                            />\r\n                                <Form\r\n                                    isUpdateFormOpen={this.state.isUpdateFormOpen}\r\n                                    detail_todolist={this.state.detail_todolist}\r\n                                    isOpenDetail={this.state.isOpenDetail}\r\n                                    actionMethod={actionMethod}\r\n                                    isFormOpen={this.state.isFormOpen}\r\n                                    isResolveFormOpen={this.state.isResolveFormOpen}\r\n                                    handleClose={this.handleClose}\r\n                                    handleOpen={this.handleOpen}\r\n                                />\r\n                            </div>\r\n                    </React.Fragment>\r\n                )\r\n                : homeDisplay = (\r\n                    <Form\r\n                        isOpenDetail={this.state.isOpenDetail}\r\n                        login_user={this.state.login_user}\r\n                        actionMethod={actionMethod}\r\n                        handleClose={this.handleClose}\r\n                        handleOpen={this.handleOpen}\r\n                    />\r\n                )\r\n\r\n        } else {\r\n            if (this.state.isOpenDetail) {\r\n                homeDisplay = (\r\n                    <Detail\r\n                        todolists={this.state.todolists}\r\n                        userinfo={this.state.userinfo}\r\n                        detail_todolist={this.state.detail_todolist}\r\n                        count={this.state.count}\r\n                        login_user={this.state.login_user}\r\n                        isOpenDetail={this.state.isOpenDetail}\r\n                        actionMethod={actionMethod}\r\n                    />\r\n                )\r\n\r\n            } else {\r\n                this.state.loading && this.state.isHome\r\n                    ? homeDisplay = (\r\n                        <div className=\"display-title-wrapper\">\r\n                            <Display\r\n                                todolists={this.state.todolists}\r\n                                userinfo={this.state.userinfo}\r\n                                actionMethod={actionMethod}\r\n                            />\r\n\r\n                        </div>\r\n                    )\r\n                    : homeDisplay = (\r\n                        <CircularProgress />\r\n                    )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Router>\r\n                <Auth>\r\n                    <Switch>\r\n\r\n                        <Route exact path='/'>\r\n\r\n                            {homeDisplay}\r\n\r\n                            <Modal\r\n                                aria-labelledby=\"transition-modal-title\"\r\n                                aria-describedby=\"transition-modal-description\"\r\n                                open={this.state.setOpen}\r\n                                onClose={this.handleClose}\r\n                                className={\"modal\"}\r\n                                closeAfterTransition\r\n                                BackdropComponent={Backdrop}\r\n                                BackdropProps={{\r\n                                    timeout: 500,\r\n                                }}\r\n                            >\r\n                                <Fade in={this.state.setOpen}>\r\n                                    <div className=\"paper\">\r\n                                        <img className=\"pop-icon\" src=\"/image/paperplane.svg\" alt=\"紙飛行機\" />\r\n                                        <div className=\"pop-message\">投稿が完了しました！</div>\r\n                                        {/* <h2 id=\"transition-modal-title\" className=\"modal-title modal-cons\">送信完了!</h2>\r\n                                        <p id=\"transition-modal-description\" className=\"modal-description modal-cons\">頑張って解決させましょう!</p> */}\r\n                                    </div>\r\n                                </Fade>\r\n                            </Modal>\r\n\r\n                        </Route>\r\n\r\n                        <Route exact path='/Search'\r\n                            render={props => <Search todolists={this.state.todolists} loginuser={this.state.username} actionMethod={actionMethod} />} />\r\n\r\n                        <Route exact path='/Notify'>\r\n                            <Notify />\r\n                        </Route>\r\n\r\n\r\n                        <Route exact path='/Mypage'\r\n                            render={props => <Mypage getTodolists={this.getTodolists} getUserinfo={this.getUserinfo} userinfo={this.state.userinfo} todolists={this.state.todolists} loginuser={this.state.login_user} actionMethod={actionMethod} />} />\r\n\r\n                    </Switch>\r\n                </Auth>\r\n\r\n                <Navigation\r\n                    clickFormClose={this.clickFormClose}\r\n                    postFormOpen={this.postFormOpen}\r\n                    SearchList={this.SearchList}\r\n                    todolists={this.state.todolists}\r\n                />\r\n\r\n            </Router>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Home;","import React from 'react';\nimport Header from './Header';\nimport Toppage from './Toppage';\nimport Register from './Register';\nimport Login from './Login';\nimport Auth from './Auth';\nimport Home from './Home';\n\nimport { BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport './App.css'\n\nclass App extends React.Component {\n\n  render() {\n\n    return (\n      \n      <Router>\n\n        <Header />\n        \n        <Switch>\n\n          <Route exact path='/Toppage'>\n            <Toppage />\n          </Route>\n\n          <Route exact path='/Register'>\n            <Register />\n          </Route>\n\n          <Route exact path='/Login'>\n            <Login />\n          </Route>\n\n          <Auth>\n            <Switch>\n\n              <Route path='/'>\n              \n              <Home />\n\n              </Route>\n\n            </Switch>\n          </Auth>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './components/App.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}